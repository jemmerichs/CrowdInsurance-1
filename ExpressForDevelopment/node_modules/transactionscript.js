var tdg = require('tabledatagateway.js');
var q = require('q');
var logger = require('logger.js');
var periodNumber = 0;
var personID = "bfa73b02-21f7-11e6-b56d-6ffe69564a95";
var internal = new Object();
var setHeaders = function(res){
  res.setHeader('Access-Control-Allow-Origin','*');
}

// Datenbankabfragen angestoßen durch den Client
//==============================================
// Daten laden
//-------------
// Lade alle Versicherungen der Person, die die Anfrage stellt
exports.getVersicherungOf = function (req, res, next) {
  tdg.selectVersicherungOf(personID,
    function(data){
      logger.info('Versicherungen der Person ' + personID + 'erfolgreich geladen.');
      setHeaders(res);
      res.status(200).json(data);
    },
    function(err){
      logger.error('Fehler beim Laden der Versicherungen der Person ' + personID + ' - ' + err);
        setHeaders(res);
      res.status(500).send('Fehler beim Laden der Versicherungen.');
    }
  );
};

// Lade alle Felder einer Versicherungs nach der Versicherungs ID
exports.getVersicherung = function (req, res, next) {
  var versicherungID = req.params.versicherungID;

  tdg.selectVersicherung(versicherungID,
    function(data){
      logger.info('Versicherung ' + versicherungID + 'erfolgreich geladen.');
      setHeaders(res);
      if(data.length != 0) {
          res.status(200).json(data);
      } else{
          res.status(404).send('Versicherung mit ID ' + versicherungID + ' wurde nicht gefunden.')
      }
    },
    function(err){
      logger.error('Fehler beim Laden der Versicherung ' + versicherungID + ' - ' + err);
        setHeaders(res);
      res.status(500).send('Fehler beim Laden der Versicherung.');
    }
  );
}

// Lade alle Kategorien
exports.getKategorien = function (req, res, next) {
  tdg.selectKategorien(
    function(data){
      logger.info('Kategorien erfolgreich geladen.');
      setHeaders(res);
      data = data[0].enum_range;
      data = data.substring(1,data.length-2);
      listOfKategorien = data.split(/,/);
      res.status(200).json(listOfKategorien);
    },
    function(err){
      logger.error('Fehler beim Laden der Kategorien - ' + err);
        setHeaders(res);
      res.status(500).send('Fehler beim Laden der Kategorien');
    }
  );
};

// Lade alle Investitionen der Person, die die Anfrage stellt
exports.getInvestitionOf = function (req, res, next) {
  tdg.selectInvestitionOf(personID,
    function(data){
      logger.info('Investitionen der Person ' + personID + 'erfolgreich geladen.');
      setHeaders(res);
      res.status(200).json(data);
    },
    function(err){
      logger.error('Fehler beim Laden der Investitionen der Person ' + personID + ' - ' + err);
        setHeaders(res);
      res.status(500).send('Fehler beim Laden der Investitionen.');
    }
  );
}

// Lade alle Investitionen einer Versicherung nach der Versicherungs ID
exports.listOfInvestitionen = function (req, res, next) {
  var versicherungID = req.params.versicherungID;
  tdg.selectInvestitionen(versicherungID,
    function(data){
      logger.info('Investitionen der Versicherung ' + versicherungID + 'erfolgreich geladen.');
      setHeaders(res);
      res.status(200).json(data);
    },
    function(err){
      logger.error('Fehler beim Laden der Investitionen der Versicherung ' + versicherungID + ' - ' + err);
        setHeaders(res);
      res.status(500).send('Fehler beim Laden der Investitionen.');
    }
  );
}

// Lade alle Felder einer Investition nach der Investitions ID
exports.getInvestition = function (req, res, next) {
  var investitionID = req.params.investitionID;
  tdg.selectInvestition(investitionID,
    function(data){
      logger.info('Investition ' + investitionID + 'erfolgreich geladen.');
      setHeaders(res);
      if(data.length != 0) {
          res.status(200).json(data);
      } else{
          res.status(404).send('Investition nicht gefunden.');
      }
    },
    function(err){
      logger.error('Fehler beim Laden der Investition ' + investitionID + ' - ' + err);
        setHeaders(res);
      res.status(500).send('Fehler beim Laden der Investition.');
    }
  );
}

// Lade alle PersonenIDs einer Versicherung
exports.getInvestorenVonVersicherung = function (req, res, next) {
  var versicherungID = req.params.versicherungID;
  tdg.selectInvestorenVonVersicherung(versicherungID,
    function(data){
      logger.info('Investoren von Versicherung ' + versicherungID + 'erfolgreich geladen.');
      setHeaders(res);
      if(data.length != 0){
          res.status(200).json(data);
      }  else{
          res.status(404).send('Versicherung nicht gefunden.');
      }
    },
    function(err){
      logger.error('Fehler beim Laden der Investoren der Versicherung ' + versicherungID + ' - ' + err);
        setHeaders(res);
      res.status(500).send('Fehler beim Laden der Personen.');
    }
  );
}

// Summiere alle aktuellen (=nicht gekuendigten) Investitionswerte einer Versicherung
exports.calculateSumOfInvestVersicherung = function (req, res, next) {
  var versicherungID = req.params.versicherungID;
  tdg.selectInvestitionsSumVonVersicherung(versicherungID,
    function(data){
      logger.info('Kalkulieren der Investitionssumme der Versicherung ' + versicherungID + ' erfolgreich durchgeführt.');
      setHeaders(res);
      if(data[0].suminvestition != null) {
          res.status(200).json(data);
      } else{
          res.status(404).send('Versicherung nicht gefunden.');
      }
    },
    function(err){
      logger.error('Fehler beim Kalkulieren der Investitionssumme der Versicherung ' + versicherungID + ' - ' + err);
        setHeaders(res);
      res.status(500).send('Fehler beim Kalkulieren der Investitionssumme.');
    }
  );
}

//
// Erstellen / Anlegen von Versicherung und Investition
//-----------------------------------------------------
// Investition erstellen
exports.erstelleInvestition = function (req, res, next) {
  var versicherungID = req.body.versicherungID;
  var betrag = req.body.investitionswert;

  tdg.erstelleInvestition(versicherungID, personID, betrag,
    function(){
      logger.info('Investition für die Versicherung ' + versicherungID + ' mit einem Betrag von ' + betrag + ' erfolgreich erstellt.');
      setHeaders(res);
      res.status(201).send('Investition erfolgreich erstellt.');
    },
    function(err){
      logger.error('Fehler beim Erstellen einer Investition für die Versicherung ' + versicherungID + ' mit einem Betrag von ' + betrag + ' - ' + err);
        setHeaders(res);
      res.status(500).send('Fehler beim Erstellen der Investition.');
    }
  );
}

// Versicherung erstellen
exports.erstelleVersicherung = function (req, res, next) {
  var name = req.body.name;
  var versicherungshoehe = req.body.versicherungshoehe;
  var beitrag = req.body.beitrag;
  var beschreibung = req.body.beschreibung;
  if(beschreibung == undefined){
    beschreibung = '';
  }
  var kategorie = req.body.kategorie;

  tdg.erstelleVersicherung(personID, name, versicherungshoehe, beitrag, beschreibung, kategorie, //abschlussZeitpunkt,
    function(){
      logger.info('Versicherung mit dem Namen ' + name + ', der Versicherungshöhe ' + versicherungshoehe
                    + ' und mit einem Beitrag von ' + beitrag + ' erfolgreich erstellt.');
      setHeaders(res);
      res.status(201).json('Versicherung erfolgreich erstellt.');
    },
    function(err){
      logger.error('Fehler beim Erstellen der Versicherung mit dem Namen ' + name + ', der Versicherungshöhe ' + versicherungshoehe
                    + ' und mit einem Beitrag von ' + beitrag + ' - ' + err);
        setHeaders(res);
      res.status(500).send('Fehler beim Erstellen der Versicherung.');
    }
  );
}

//
// Kuendigung einreichen
//-----------------------------
// Kuendigung einer Versicherung einreichen (zzgl. der Einreichung der Kuendigung fue dazugehoerige Investitionen)
exports.versicherungKuendigungEinreichen = function (req, res, next) {
  var versicherungID = req.params.versicherungID;
  tdg.versicherungKuendigungEinreichen(versicherungID,
    function(data){
      logger.info('Kündigung der Versicherung ' + versicherungID + ' erfolgreich eingereicht.');
      setHeaders(res);
      res.status(200).json('Kündigung der Versicherung erfolgreich eingereicht.');
    },
    function(err){
      logger.error('Fehler beim Einreichen der Kündigung der Versicherung ' + versicherungID + ' - ' + err);
        setHeaders(res);
      res.status(500).send('Fehler beim Einreichen der Kündigung der Versicherung.');
    }
  );
}

// Kuendigung einer Investition einreichen
exports.investitionKuendigungEinreichen = function (req, res, next) {
  var investitionID = req.params.investitionID;
  tdg.investitionKuendigungEinreichen(investitionID,
    function(data){
      logger.info('Kündigung der Investition ' + investitionID + ' erfolgreich eingereicht.');
      setHeaders(res);
      res.status(200).json('Kündigung der Investition erfolgreich eingereicht.');
    },
    function(err){
      logger.error('Fehler beim Einreichen der Kündigung der Investition ' + investitionID + ' - ' + err);
      setHeaders(res);
      res.status(500).send('Fehler beim Einreichen der Kündigung der Investition.');
    }
  );
}

//
// Abhandlung der Perioden
//===============================
/*
  Die periodische Verarbeitung steuert die Zahlungsstroeme
    - Auszahlen der Schadenshoehe zum Ende des Kuendigungszeitraums verarbeiten
   - Kuendigungen von Versicherungen und Investitionen zum Ende des Kuendigungszeitraums verarbeiten
   - Einziehen der Versicherungsbeitraege
   - Auszahlung der Rendite
*/
exports.periodicSchedule = function () {
  logger.consoleInfo('Berechne Periode ' + periodNumber);
  q.fcall(exports.auszahlungSchadensfaelle)
  .then(exports.versicherungKuendigungenVerarbeiten)
  .then(exports.investitionKuendigungenVerarbeiten)
  .then(exports.einziehenVersicherungsbeitraege)
  .then(exports.auszahlungRendite)
  .catch(function (err){
    logger.error('Es ist ein Fehler im periodicSchedule aufgetreten: ' + err);
  })
  .done();
  periodNumber += 1;
}

exports.auszahlungSchadensfaelle = function() {
  // Für alle Schadensfälle mit istAusgezahlt = false:
    // Zahlung an den Versicherungsnehmer
    // Setze istAusgezahlt = true
}

exports.versicherungKuendigungenVerarbeiten = function() {
  // Für alle Versicherungen die wirdGekuendigt = true haben:
    // Setze istGekuendigt = true
  tdg.updateVersicherungGekuendigt(
    function(data){
      //log versicherungsskuendigungen erfolgreich abgeschlossen
    },
    function(err){
      logger.error('Es ist ein Fehler bei der Kündiungsroutine der Versicherungen aufgetreten - ' + err);
      //log fehler bei verischerung kuendigen
    }
  );
}

exports.investitionKuendigungenVerarbeiten = function() {
  // Für alle Invesitionen die wirdGekuendigt = true haben:
    // Zahlung von der Versicherung an den Investor
    // Setze istGekuendigt = true
  tdg.investitionKuendigen(
    function(data){
      //log investitionskuendigungen erfolgreich abgeschlossen
    },
    function(err){
      logger.error('Es ist ein Fehler bei der Kündiungsroutine der Investitionen aufgetreten - ' + err);
      //log fehler bei investition kuendigen
    }
  );
}

exports.einziehenVersicherungsbeitraege = function() {
  // Laufende Versicherungen laden
  // Fuer jede Versicherung bestimmen, wie hoch die Investitionssumme ist und den Beitrag bestimmen
  tdg.selectActiveVersicherungAndCalculateBeitrag(
    function(data) {
      // Die Zahlungen ausfuehren
      internal.beitragEinziehen(data);
    },
    function(err) {
      logger.error('Es ist ein Fehler beim Einziehen der Versicherungsbeiträge aufgetreten - ' + err);
    }
  );
}

internal.beitragEinziehen = function(data) {
  for (var i = 0, versicherung; versicherung = data[i]; i++) {
    logger.info('Einzug eines Beitrags ' + JSON.stringify(versicherung));
    tdg.insertZahlung(versicherung.id,versicherung.personID, versicherung.echterBeitrag);
  }
};

exports.auszahlungRendite = function() {
  tdg.getPaymentrelevantInvestitions(
    function(data) {
      internal.renditeAuszahlen(data);
    },
    function(err) {
      logger.error('Es ist ein Fehler beim Einziehen der Versicherungsbeiträge aufgetreten - ' + err);
    }
  );
}

internal.renditeAuszahlen = function(data) {
  for (var i = 0, investition; investition = data[i]; i++) {
    logger.info('Auszahlung einer Rendite ' + JSON.stringify(investition));
    tdg.insertZahlung(investition.id,investition.personID, "-" + investition.rendite);
  }
}
