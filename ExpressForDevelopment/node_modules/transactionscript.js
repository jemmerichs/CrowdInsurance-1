var tdg = require('tabledatagateway.js');
var q = require('q');

var personID = 4;

var internal = new Object();

var setHeaders = function(res){
  res.setHeader('Access-Control-Allow-Origin','*');
}

exports.getVersicherungOf = function (req, res, next) {
  tdg.selectVersicherungOf(personID,
    function(data){
      setHeaders(res);
      res.status(200).json({
        status: 'success',
        data: data,
      });
    },
    function(err){return next(err)}
  );
};

exports.getVersicherung = function (req, res, next) {
  var versicherungID = req.params.versicherungID;
  tdg.selectVersicherung(versicherungID,
    function(data){
      setHeaders(res);
      res.status(200).json({
        status: 'success',
        data: data,
      });
    },
    function(err){return next(err)}
  );
}

exports.erstelleInvestition = function (req, res, next) {
  var versicherungID = req.body.versicherungID;
  var betrag = req.body.investitionswert;

  if(versicherungID == undefined || betrag == undefined){ //todo: Validierung
    res.status(404).send(versicherungID + " - " + betrag);
  }
  tdg.erstelleInvestition(versicherungID, personID, betrag,
    function(){
      setHeaders(res);
      res.status(200).json({
        status: 'success'
      });
    },
    function(err){return next(err)}
  );
}

exports.erstelleVersicherung = function (req, res, next) {
  var name = req.body.name;
  var versicherungshoehe = req.body.versicherungshoehe;
  var beitrag = req.body.beitrag;
  var beschreibung = req.body.beschreibung;

  if(name == undefined || versicherungshoehe == undefined || beitrag == undefined || beschreibung == undefined){ //todo: Validierung
    res.status(404).send(name + " - " + versicherungshoehe + " - " + beitrag + " - " + beschreibung);
  }
  tdg.erstelleVersicherung(personID, name, versicherungshoehe, beitrag, beschreibung, //abschlussZeitpunkt,
    function(){
      setHeaders(res);
      res.status(200).json({
        status: 'success'
      });
    },
    function(err){return next(err)}
  );
}

exports.getInvestitionOf = function (req, res, next) {
  tdg.selectInvestitionOf(personID,
    function(data){
      setHeaders(res);
      res.status(200).json({
        status: 'success',
        data: data,
      });
    },
    function(err){return next(err)}
  );
}

exports.listOfInvestitionen = function (req, res, next) {
  var versicherungID = req.params.versicherungID;
  tdg.selectInvestitionen(versicherungID,
    function(data){
      setHeaders(res);
      res.status(200).json({
        status: 'success',
        data: data,
      });
    },
    function(err){return next(err)}
  );
}

exports.getInvestition = function (req, res, next) {
  var investitionID = req.params.investitionID;
  tdg.selectInvestition(investitionID,
    function(data){
      setHeaders(res);
      res.status(200).json({
        status: 'success',
        data: data,
      });
    },
    function(err){return next(err)}
  );
}

exports.getInvestorenVonVersicherung = function (req, res, next) {
  var versicherungID = req.params.versicherungID;
  tdg.selectInvestorenVonVersicherung(versicherungID,
    function(data){
      setHeaders(res);
      res.status(200).json({
        status: 'success',
        data: data,
      });
    },
    function(err){return next(err)}
  );
}

exports.calculateSumOfInvestVersicherung = function (req, res, next) {
  var versicherungID = req.params.versicherungID;
  tdg.selectInvestitionsSumVonVersicherung(versicherungID,
    function(data){
      setHeaders(res);
      res.status(200).json({
        status: 'success',
        data: data,
      });
    },
    function(err){return next(err)}
  );
}
/*
  Die periodische Verarbeitung steuert die Zahlungsstroeme
    - Auszahlen der Schadenshoehe zum Ende des Kuendigungszeitraums verarbeiten
   - Kuendigungen von Versicherungen und Investitionen zum Ende des Kuendigungszeitraums verarbeiten
   - Einziehen der Versicherungsbeitraege
   - Auszahlung der Rendite
*/
exports.periodicSchedule = function () {
  console.log("Periodic Tick");
  q.fcall(exports.auszahlungSchadensfaelle)
  .then(exports.versicherungKuendigungenVerarbeiten)
  .then(exports.investitionKuendigungenVerarbeiten)
  .then(exports.einziehenVersicherungsbeitraege)
  .then(exports.auszahlungRendite)
  .catch(function (err){
    console.log('Es ist ein Fehler im periodicSchedule aufgetreten: ' + err);
  })
  .done();
}

exports.auszahlungSchadensfaelle = function() {
  // F체r alle Schadensf채lle mit istAusgezahlt = false:
    // Zahlung an den Versicherungsnehmer
    // Setze istAusgezahlt = true
}

exports.versicherungKuendigungenVerarbeiten = function() {
  // F체r alle Versicherungen die wirdGekuendigt = true haben:
    // Setze istGekuendigt = true
  tdg.updateVersicherungGekuendigt(
    function(data){
      //log versicherungsskuendigungen erfolgreich abgeschlossen
    },
    function(err){
      console.log(err);
      //log fehler bei verischerung kuendigen
    }
  );
}

exports.investitionKuendigungenVerarbeiten = function() {
  // F체r alle Invesitionen die wirdGekuendigt = true haben:
    // Zahlung von der Versicherung an den Investor
    // Setze istGekuendigt = true
  tdg.investitionKuendigen(
    function(data){
      //log investitionskuendigungen erfolgreich abgeschlossen
    },
    function(err){
      console.log(err);
      //log fehler bei investition kuendigen
    }
  );
}

exports.einziehenVersicherungsbeitraege = function() {
  // Laufende Versicherungen laden
  // Fuer jede Versicherung bestimmen, wie hoch die Investitionssumme ist und den Beitrag bestimmen
  tdg.selectActiveVersicherungAndCalculateBeitrag(
    function(data) {
      // Die Zahlungen ausfuehren
      internal.beitragEinziehen(data);
    },
    function(err) {
      console.log(err);
    }
  );
}

internal.beitragEinziehen = function(data) {
  for (var i = 0, versicherung; versicherung = data[i]; i++) {
    console.log("Payment: " + JSON.stringify(versicherung) + "\n");
    tdg.insertZahlung(versicherung.id,versicherung.personID, versicherung.echterBeitrag);
  }
};

exports.auszahlungRendite = function() {
  tdg.getPaymentrelevantInvestitions(
    function(data) {
      internal.renditeAuszahlen(data);
    },
    function(err) {
      console.log(err);
    }
  );
}

internal.renditeAuszahlen = function(data) {
  for (var i = 0, investition; investition = data[i]; i++) {
    console.log("Rendite: " + JSON.stringify(investition) + "\n");
    tdg.insertZahlung(investition.id,investition.personID, "-" + investition.rendite); // TODO vielleicht etwas eleganter einen negativen Wert aus type Money machen
  }
}
