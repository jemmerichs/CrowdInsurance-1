var tdg = require('tabledatagateway.js');

var personID = 4;

var internal = new Object();

exports.getVersicherungOf = function (req, res, next) {
  tdg.selectVersicherungOf(personID,
    function(data){
      res.status(200).json({
        status: 'success',
        data: data,
      });
    },
    function(err){return next(err)}
  );
};

exports.getVersicherung = function (req, res, next) {
  var versicherungID = req.params.versicherungID;
  tdg.selectVersicherung(versicherungID,
    function(data){
      res.status(200).json({
        status: 'success',
        data: data,
      });
    },
    function(err){return next(err)}
  );
}

exports.erstelleInvestition = function (req, res, next) {
  var versicherungID = req.body.versicherungID;
  var betrag = req.body.investitionswert;
  if(versicherungID == undefined || betrag == undefined){ //todo: Validierung
    res.status(404).send(versicherungID + " - " + betrag);
  }
  var abschlussZeitpunkt = new Date().toLocaleString();
  tdg.erstelleInvestition(versicherungID, personID, abschlussZeitpunkt, betrag,
    function(){
      res.status(200).json({
        status: 'success'
      });
    },
    function(err){return next(err)}
  );
}

exports.erstelleVersicherung = function (req, res, next) {
  var personID = 4;
  var name = req.body.name;
  var versicherungshoehe = req.body.versicherungshoehe;
  var beitrag = req.body.beitrag;
  var beschreibung = req.body.beschreibung;
  var abschlussZeitpunkt = new Date().toLocaleString();

  if(name == undefined || versicherungshoehe == undefined || beitrag == undefined || beschreibung == undefined){ //todo: Validierung
    res.status(404).send(name + " - " + versicherungshoehe + " - " + beitrag + " - " + beschreibung);
  }
  tdg.erstelleVersicherung(personID, name, versicherungshoehe, beitrag, beschreibung, abschlussZeitpunkt,
    function(){
      res.status(200).json({
        status: 'success'
      });
    },
    function(err){return next(err)}
  );
}

exports.getInvestitionOf = function (req, res, next) {
  tdg.selectInvestitionOf(personID,
    function(data){
      res.status(200).json({
        status: 'success',
        data: data,
      });
    },
    function(err){return next(err)}
  );
}

exports.listOfInvestitionen = function (req, res, next) {
  var versicherungID = req.params.versicherungID;
  tdg.selectInvestitionen(versicherungID,
    function(data){
      res.status(200).json({
        status: 'success',
        data: data,
      });
    },
    function(err){return next(err)}
  );
}

exports.getInvestition = function (req, res, next) {
  var investitionID = req.params.investitionID;
  tdg.selectInvestition(investitionID,
    function(data){
      res.status(200).json({
        status: 'success',
        data: data,
      });
    },
    function(err){return next(err)}
  );
}

exports.getInvestorenVonVersicherung = function (req, res, next) {
  var versicherungID = req.params.versicherungID;
  tdg.selectInvestorenVonVersicherung(versicherungID,
    function(data){
      res.status(200).json({
        status: 'success',
        data: data,
      });
    },
    function(err){return next(err)}
  );
}

exports.calculateSumOfInvestVersicherung = function (req, res, next) {
  var versicherungID = req.params.versicherungID;
  tdg.selectInvestitionsSumVonVersicherung(versicherungID,
    function(data){
      res.status(200).json({
        status: 'success',
        data: data,
      });
    },
    function(err){return next(err)}
  );
}
/*
  Die periodische Verarbeitung steuert die Zahlungsstroeme
   - Kuendigungen von Versicherungen und Investitionen zum Ende des Kuendigungszeitraums verarbeiten
   - Einziehen der Versicherungsbeitraege
   - Auszahlung der Rendite
   - Auszahlen der Schadenshoehe, wenn die Einspruchszeit abgelaufen ist
*/
exports.periodicSchedule = function () {
  console.log("Periodic Tick");
  exports.versicherungKuendigungenVerarbeiten();
  exports.investitionKuendigungenVerarbeiten();
  exports.einziehenVersicherungsbeitraege();
  exports.auszahlungRendite();
  exports.auszahlungSchadensfaelle();
}
// das folgende ist noch nicht ausreichend definiert in der Analyse Phase (, oder?)
exports.versicherungKuendigungenVerarbeiten = function() {}
exports.investitionKuendigungenVerarbeiten = function() {
}
exports.einziehenVersicherungsbeitraege = function() {
}

internal.calculateSumOfInvestVersicherung = function(data) {
  console.log(JSON.stringify(data));
}

exports.auszahlungRendite = function() {
  tdg.getPaymentrelevantInvestitions(
    function(data) {
      internal.calculateSumOfInvestVersicherung(data);
    },
    function(err) {
      console.log(err);
    }
  );
}
exports.auszahlungSchadensfaelle = function() {}
