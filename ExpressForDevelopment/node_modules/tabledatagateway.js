var queries = require('queries.js');
var logger = require('logger.js');

var getDBPromis = function(){
  var credentials;
  if (process.argv[2] != undefined && (process.argv[2].startsWith('postgres'))) {
    credentials = process.argv[2];
  } else{
    try {
      var dbconfig = require('dbconfig.js')
      credentials = dbconfig.url;
    }catch(err) {
      credentials = 'postgres://' + process.env.DB_USER + ':' + process.env.DB_PASSWORD + '@' + process.env.DB_HOST + ':' + process.env.DB_PORT + '/' + process.env.DB_DATABASENAME + ((process.env.DB_SSL=="true")?'?ssl=true':'');
    }
  }
  logger.consoleInfo('Setze die Datenbank-URL auf ' + credentials);
  var pgp = require('pg-promise')();
  var db = pgp(credentials);
  return db;
}

var db = getDBPromis();

//1. Einfache SELECT-Abfragen
//============================
//1.1 Versicherung
//-----------------
exports.selectVersicherungOf = function(personID, onSuccess, onError){
  // var query = queries.selectVersicherungOf;
  db.func('getversicherungpersonbyuid',[personID]).then(onSuccess).catch(onError);
}

exports.selectVersicherung = function(versicherungID, onSuccess, onError){
  //var query = queries.selectVersicherung;
  db.func('getversicherungpersonbyvid',[versicherungID]).then(onSuccess).catch(onError);
}

exports.selectBewertungen = function(versicherungID, onSuccess, onError){
  db.func('getversicherungsbewertungenbyvid',[versicherungID]).then(onSuccess).catch(onError);
}

// Filtern und sortieren von Versicherungen
exports.filterVersicherung = function(kategorie, orderby, asc_desc, onSuccess, onError){
  var query = queries.filterVersicherung + ' ' + (asc_desc?"ASC":"DESC") + ';';
  db.any(query,[kategorie, orderby]).then(onSuccess).catch(onError);
}

// Sortieren von Versicherungen
exports.orderVersicherung = function(orderby, asc_desc, onSuccess, onError){
  var query = queries.orderVersicherung + ' ' + (asc_desc?"ASC":"DESC") + ';';
  db.any(query,[orderby]).then(onSuccess).catch(onError);
}
//
//1.2 Kategorien der Versicherungen
//---------------------------------
exports.selectKategorien = function(onSuccess, onError){
    db.func('getkategorien').then(onSuccess).catch(onError);
}

//
//1.3 Investition
//-----------------
exports.selectInvestitionOf = function(personID, onSuccess, onError){
  // var query = queries.selectInvestitionOf;
  db.func('getinvestitionkomplettbyuid',[personID]).then(onSuccess).catch(onError);
}

exports.selectInvestitionen = function(versicherungID, onSuccess, onError){
  // var query = queries.selectInvestitionen;
  db.func('getinvestitionkomplettbyvid',[versicherungID]).then(onSuccess).catch(onError);
}

exports.selectInvestition = function(investitionID, onSuccess, onError){
  // var query = queries.selectInvestition
  db.func('getinvestitionkomplettbyiid',[investitionID]).then(onSuccess).catch(onError);
}

//
//1.4 Investoren/Investitionssumme von Versicherung
//--------------------------------------------------
exports.selectInvestorenVonVersicherung = function(versicherungID, onSuccess, onError){
  db.func('getinvestorenbyvid',versicherungID).then(onSuccess).catch(onError);
}

exports.selectInvestitionsSumVonVersicherung = function(versicherungID, onSuccess, onError){
  db.func('getinvestitionssummebyvid',[versicherungID]).then(onSuccess).catch(onError);
}

//
//2. Einfache INSERT-Anweisungen
//===============================
//2.1 Versicherung
//-----------------
exports.erstelleVersicherung = function(personID, name, versicherungshoehe, beitrag, beschreibung, kategorie, onSuccess, onError){
  db.func('createversicherung', [personID, name, versicherungshoehe, beitrag, beschreibung, kategorie]).then(onSuccess).catch(onError);
}

exports.insertZahlung = function(versicherungID, personID, betrag, onSuccess, onError){
  db.func('executezahlung', [versicherungID,personID,betrag]).then(onSuccess).catch(onError);
}

//
//3. Einfache UPDATE-Anfragen
//==========================================
exports.updateVersicherungGekuendigt = function(onSuccess, onError){
  db.func('finalizeversicherungskuendigung').then(onSuccess).catch(onError);
}

exports.investitionKuendigungEinreichen = function(investitionID, onSuccess, onError){
  db.func('submitinvestitionskuendigung', investitionID).then(onSuccess).catch(onError);
}

//
//4. Komplexe / Zusammengesetzte Abfragen
//==========================================
//4.1 Investition und Investitionszahlung eintragen
//-------------------------------------------------
exports.erstelleInvestition = function(versicherungID, personID, betrag, onSuccess, onError){
  db.func('createinvestition',[versicherungID, personID, betrag]).then(onSuccess).catch(onError);
}

//
//4.2 Versicherung kuendigung einreichen und dazugehoerige Investition kuendigung einreichen
//---------------------------------------------------------------------------------------------
exports.versicherungKuendigungEinreichen = function(versicherungID, onSuccess, onError){
  db.func('submitversicherungskuendigung', versicherungID).then(onSuccess).catch(onError);
}

//
//4.3 Investition zurueckzahlen und Investition tatsaechlich kuendigen
//---------------------------------------------------------------------
exports.investitionKuendigen = function(onSuccess, onError){
  db.func('finalizeinvestitionskuendigung').then(onSuccess).catch(onError);
}

//
//4.4 Sonstige ;-) //TODO: Kommentare einfuegen
//
exports.getPaymentrelevantInvestitions = function(onSuccess, onError){
  db.func('getzahlungsrelevanteinvestitionen').then(onSuccess).catch(onError);
}

exports.selectActiveVersicherungAndCalculateBeitrag = function(onSuccess, onError){
  db.func('getversicherungundbeitraege').then(onSuccess).catch(onError);
}
