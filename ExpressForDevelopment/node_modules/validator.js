var tdg = require('tabledatagateway.js');
var logger = require('logger.js')
var internal = new Object();
var setHeaders = function(res){
  res.setHeader('Access-Control-Allow-Origin','*');
}

internal.isNumber = function(value){
  var regex = /^[1-9][0-9]*$/;
  if(value.match(regex)){
    return true;
  } else{
    return false;
  }
}

internal.isMoney = function(value){
  var regex = /^[1-9][0-9]*,[0-9][0-9] €$/;
  if(value.match(regex)){
    return true;
  } else{
    return false;
  }
}

exports.versicherungID = function(req,res,next){
  var versicherungID = req.params.versicherungID;
  //Prüfe ob die ID eine Nummer ist
  if(internal.isNumber(versicherungID)){
    next();
  } else{
    setHeaders(res);
    res.status(400).send('Fehlerhafte Anfrage: Versicherungs ID ist keine Zahl');
  }
}

exports.investitionID = function(req,res,next){
  var investitionID = req.params.investitionID;
  //Prüfe ob die ID eine Nummer ist
  if(internal.isNumber(investitionID)){
    next();
  } else{
    setHeaders(res);
    res.status(400).send('Fehlerhafte Anfrage: Investitions ID ist keine Zahl');
  }
}

exports.parameterZurInvestitionsErstellung = function(req,res,next){
  var versicherungID = req.body.versicherungID;
  var betrag = req.body.investitionswert;

  if(internal.isNumber(versicherungID) && internal.isMoney(betrag)){
    next();
  } else{
    setHeaders(res);
    res.status(400).send('Bad Request: ' + versicherungID + " - " + betrag);
  }
}

exports.parameterZurVersicherungsErstellung = function(req,res,next){
  var name = req.body.name;
  var versicherungshoehe = req.body.versicherungshoehe;
  var beitrag = req.body.beitrag;
  var beschreibung = req.body.beschreibung;

  if(name != undefined && name.length > 0 && internal.isMoney(versicherungshoehe) && internal.isMoney(beitrag)) {
    next();
  } else{
    setHeaders(res);
    res.status(400).send('Bad Request: ' + name + " - " + versicherungshoehe + " - " + beitrag + " - " + beschreibung);
  }
}

exports.obKategorieExistiert = function(req,res,next){ //Not YET READY!!!
  var kategorie = req.body.kategorie;
  tdg.selectVersicherung(
      function(data){
        data = data.substring(1,data.length-2);
        listOfKategorien = data.split(/,/);
        if(listOfKategorien.indexOf(kategorie) != -1){
          next();
        } else{
          setHeaders(res);
          res.status(404).send('Angegebene Kategorie existiert nicht in der Datenbank.');
        }
      },
      function(err){
        logger.error('Fehler beim Laden der Versicherung ' + versicherungID + ' zum Zweck der Validierung - ' + err);
        setHeaders(res);
        res.status(500).send('Es konnte nicht festgestellt werden ob die angegebene Versicherung bereits gekuendigt ist oder wird.');
      }
  );
}

exports.obVersicherungGekuendigtIstOderWird = function(req,res,next){
  var versicherungID = req.body.versicherungID;
  tdg.selectVersicherung(versicherungID,
      function(data){
        if(data[0].istGekuendigt == false && data[0].wirdGekuendigt == false){
          req.body.versicherungshoehe = data[0].versicherungshoehe;
          next();
        } else{
          setHeaders(res);
          res.status(409).send('Angegebene Versicherung ist oder wird Gekuendigt und somit kann nicht mehr in sie investiert werden.');
        }
      },
      function(err){
        logger.error('Fehler beim Laden der Versicherung ' + versicherungID + ' zum Zweck der Validierung - ' + err);
        setHeaders(res);
        res.status(500).send('Es konnte nicht festgestellt werden ob die angegebene Versicherung bereits gekuendigt ist oder wird.');
      }
  );
}

exports.obVersicherungSchonVollIst = function(req,res,next){
  var versicherungID = req.body.versicherungID;
  var versicherungshoehe = req.body.versicherungshoehe; //Wird in obVersicherungGekuendigtIstOderWird zugewiesen

  tdg.selectInvestitionsSumVonVersicherung(versicherungID,
      function(data){
        var diff = versicherungshoehe - data[0].suminvestition;
        var betrag = req.body.investitionswert;

        if(diff >= betrag){
          next();
        } else if(diff > 0 && diff < betrag) {
          // Investiere maximal wenn es nicht reicht
          req.body.investitionswert = diff;
          next();
        } else if(diff == 0){
          setHeaders(res);
          res.status(409).send('Angegebene Versicherung ist voll investiert.');
        } else{
          logger.error('Es wurde mehr investiert als die Versicherung vorsieht.');
          setHeaders(res);
          res.status(500).send('Err: Es wurde mehr investiert als die Versicherung vorsieht.');
        }
      },
      function(err){
        logger.error('Fehler beim Laden der Versicherung ' + versicherungID + ' zum Zweck der Validierung - ' + err);
        setHeaders(res);
        res.status(500).send('Es konnte nicht festgestellt werden ob die angegebene Versicherung bereits gekuendigt ist oder wird.');
      }
  );
  next();
}
