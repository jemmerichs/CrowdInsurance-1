var tdg = require('tabledatagateway.js');
var logger = require('logger.js')
var internal = new Object();

internal.isNumber = function(value){
  value = value + '';
  var regex = /^[1-9][0-9]*$/;
  if(value.match(regex)){
    return true;
  } else{
    return false;
  }
}

internal.isMoney = function(value){
  var regex = /^(([1-9][0-9]?[0-9]?)([.][0-9]{3})*|[0]),[0-9]{2}\s€$/;
  if(value.match(regex)){
    return true;
  } else{
    return false;
  }
}

internal.moneyToNumber = function(money){
  money = money + '';
  money = money.substring(0,money.length-2);
  var euros = money.split(/,/)[0].split(/[.]/);
  var cents = money.split(/,/)[1];
  var number = 0;
  for(var i=0; i<euros.length; i++){
    number += parseInt(euros[i]) * Math.pow(1000, (euros.length - i - 1));
  }
  number += parseInt(cents) / 100;
  return number;
}

exports.numberToMoney = function(number){
  number = number + '';
  var euros = number.split(/[.]/)[0];
  var money = '';
  if ( number.split(/[.]/)[1] != undefined ){
    money = number.split(/[.]/)[1];
  }
  money = ',' + money + ' €';
  var thousands = euros.length % 3;
  while(euros.length > 3){
    money = '.' + euros.substring(euros.length - 3) + money;
    euros = euros.substring(0,euros.length - 3);
  }
  money = euros + money;
  return money;
}

exports.versicherungID = function(req,res,next){
  var versicherungID = req.params.versicherungID;
  //Prüfe ob die ID eine Nummer ist
  if(internal.isNumber(versicherungID)){
    next();
  } else{
    res.status(400).send('Fehlerhafte Anfrage: Versicherungs ID ist keine Zahl');
  }
}

exports.investitionID = function(req,res,next){
  var investitionID = req.params.investitionID;
  //Prüfe ob die ID eine Nummer ist
  if(internal.isNumber(investitionID)){
    next();
  } else{
    res.status(400).send('Fehlerhafte Anfrage: Investitions ID ist keine Zahl');
  }
}

exports.schadensfallID = function(req,res,next){
  var schadensfallID = req.params.schadensfallID;
  //Prüfe ob die ID eine Nummer ist
  if(internal.isNumber(schadensfallID)){
    next();
  } else{
    res.status(400).send('Fehlerhafte Anfrage: Schadensfall ID ist keine Zahl');
  }
}

exports.parameterSchadensfall = function(req,res,next){
  var versicherungID = req.body.versicherungID;
  var schadenshoehe = req.body.schadenshoehe;
  var bezeichnung = req.body.bezeichnung;
  if(req.body.beschreibung == undefined) {
    req.body.beschreibung = '';
  }
  if(versicherungID == undefined || schadenshoehe == undefined || bezeichnung == undefined){
    res.status(400).send("Kann versicherungID und/oder schadenshoehe und/oder bezeichnung nicht angegeben.");
    return;
  }

  if(internal.isNumber(versicherungID) && internal.isMoney(schadenshoehe)){
    next();
  } else{
    logger.error('Bad Request: ' + versicherungID + " - " + schadenshoehe);
    res.status(400).send('Bad Request: ' + versicherungID + " - " + schadenshoehe);
  }
}

exports.parameterSchadensfallAendern = function(req,res,next){
  var schadensfallID = req.body.schadensfallID;
  var schadenshoehe = req.body.schadenshoehe;
  var bezeichnung = req.body.bezeichnung;
  if(req.body.beschreibung == undefined) {
    req.body.beschreibung = '';
  }
  if(schadensfallID == undefined || schadenshoehe == undefined || bezeichnung == undefined || !internal.isNumber(schadensfallID)){
    res.status(400).send("schadensfallID und/oder schadenshoehe und/oder bezeichnung sind nicht korrekt angegeben.");
    return;
  }

  if(internal.isMoney(schadenshoehe)){
    next();
  } else{
    logger.error('Bad Request: ' + schadensfallID + " - " + schadenshoehe);
    res.status(400).send('Bad Request: ' + schadensfallID + " - " + schadenshoehe);
  }
}

exports.parameterZurInvestitionsErstellung = function(req,res,next){
  var versicherungID = req.body.versicherungID;
  var betrag = req.body.investitionshoehe;

  if(internal.isNumber(versicherungID) && internal.isMoney(betrag)){
    next();
  } else{
    res.status(400).send('Bad Request: ' + versicherungID + " - " + betrag);
  }
}

exports.parameterZurVersicherungsErstellung = function(req,res,next){
  var name = req.body.name;
  var versicherungshoehe = req.body.versicherungshoehe;
  var beitrag = req.body.beitrag;
  var beschreibung = req.body.beschreibung;

  if(name != undefined && name.length > 0 && internal.isMoney(versicherungshoehe) && internal.isMoney(beitrag)) {
    logger.consoleInfo("Parameter zur Versicherungserstellung passen.");
    next();
  } else{
    res.status(400).send('Bad Request: ' + name + " - " + versicherungshoehe + " - " + beitrag + " - " + beschreibung);
  }
}

exports.parameterKommentar = function(req,res,next){
  var versicherungID = req.body.versicherungID;
  var text = req.body.text;

  if(text != undefined && versicherungID != undefined && text.length > 0 && internal.isNumber(versicherungID)) {
    logger.consoleInfo("Parameter zur Kommentarerstellung passen.");
    next();
  } else{
    res.status(400).send('Bad Request: ' + name + " - " + versicherungshoehe + " - " + beitrag + " - " + beschreibung);
  }
}

exports.obKategorieExistiert = function(req,res,next){ //Not YET READY!!!
  var kategorie = req.body.kategorie;
  logger.consoleInfo("Kategorie: " + kategorie);
  tdg.selectKategorien(
      function(data){
        // logger.consoleInfo("Abfrage der Kategorien: " + JSON.stringify(data));
        data = data[0].getkategorien;
        data = data.substring(1,data.length-2);
        listOfKategorien = data.split(/,/);
        // logger.consoleInfo("Alle Kategorien: " + listOfKategorien);
        if(listOfKategorien.indexOf(kategorie) != -1){
          next();
        } else{
          res.status(404).send('Angegebene Kategorie existiert nicht in der Datenbank.');
        }
      },
      function(err){
        logger.error('Fehler beim Laden der Versicherung ' + versicherungID + ' zum Zweck der Validierung - ' + err);
        res.status(500).send('Es konnte nicht festgestellt werden ob die angegebene Versicherung bereits gekuendigt ist oder wird.');
      }
  );
}

exports.obVersicherungGekuendigtIstOderWird = function(req,res,next){
  var versicherungID = req.body.versicherungID;
  tdg.selectVersicherung(versicherungID,
      function(data){
        if(data[0].istGekuendigt == false && data[0].wirdGekuendigt == false){
          req.body.versicherungshoehe = data[0].versicherungshoehe;
          next();
        } else{
          res.status(409).send('Angegebene Versicherung ist oder wird Gekuendigt und somit kann nicht mehr in sie investiert werden.');
        }
      },
      function(err){
        logger.error('Fehler beim Laden der Versicherung ' + versicherungID + ' zum Zweck der Validierung - ' + err);
        res.status(500).send('Es konnte nicht festgestellt werden ob die angegebene Versicherung bereits gekuendigt ist oder wird.');
      }
  );
}

exports.obVersicherungSchonVollIst = function(req,res,next){
  var versicherungID = req.body.versicherungID;
  var versicherungshoehe = internal.moneyToNumber(req.body.versicherungshoehe); //Wird in obVersicherungGekuendigtIstOderWird zugewiesen

  tdg.selectInvestitionsSumVonVersicherung(versicherungID,
      function(data){
        var diff = versicherungshoehe - internal.moneyToNumber(data[0].getinvestitionssummebyvid);
        var investitionshoehe = internal.moneyToNumber(req.body.investitionshoehe);
        if(diff >= investitionshoehe){
          next();
        } else if(diff > 0 && diff < investitionshoehe) {
          // Investiere maximal wenn es nicht reicht
          req.body.investitionshoehe = internal.numberToMoney(diff);
          next();
        } else if(diff == 0){
          res.status(409).send('Angegebene Versicherung ist voll investiert.');
        } else{
          logger.error('Es wurde mehr investiert als die Versicherung vorsieht.');
          res.status(500).send('Err: Es wurde mehr investiert als die Versicherung vorsieht.');
        }
      },
      function(err){
        logger.error('Fehler beim Laden der Versicherung ' + versicherungID + ' zum Zweck der Validierung - ' + err);
        res.status(500).send('Es konnte nicht festgestellt werden ob die angegebene Versicherung bereits gekuendigt ist oder wird.');
      }
  );
}
